Purpose:
To maintain a record of the longest chain of *coin blockheaders.

Inputs: 
tx.sender, tx.value, tx.fee, tx.data, tx.datan 
contract.memory, contract.address, contract.creator 
block.contract_memory, block.addressbalance, block.number, block.difficulty, block.basefee, block.timestamp

BLOCKCHECKS:	
check syntactic correctness
reject if already exists in index
check block hash against nBits PoW requirement
check prevblock is in our index (that this block is in a main or side chain)
reject if timestamp is <= median of the last 11 blocks
verify nBits difficulty is correct. (matching diff rules)
check checkpoints if the block is old
add block to tree


Transaction to add blockheader to SPV chain
* Form: (C, feemag * block.basefee, [blockheader])
	where C is the contract defining the header chain
	feemag is an appropriate value for ethereum rules
	tx.data[0] is the blockheader
	
#!/usr/bin/ethereum

if tx.fee < requiredfee:
	stop

# special locations in memory:
# mc-1  : state
# mc    : [blockindexcount, topblock, topdiff, topheight]
BIC = 0
TB = 1
TD = 2
TH = 3
# datastruct for blocks:
# c.m[hash] = [blockheader, index, height, cumulative diff]
BH = 0
IDX = 1
HGT = 2
CD = 3
# c.m[mc+index] = hash

# other variables
DIFFONETARGET = 0x00000000FFFF0000000000000000000000000000000000000000000000000000	
	
blockheader = tx.data[0]
mc = magicconstant = 2 ^ 255 	# no blockhash will ever be this large with direct pow,
                                # or if they are it's as good as anywhere else

								
state = contract.memory[mc-1]
if state == 0:
	i = 1
	contract.memory[mc] = [1, 0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f, 1, 1]
	contract.memory[mc+i] = 0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f
	contract.memory[0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f] = 
		[0x01000000 ++ 0x0000000000000000000000000000000000000000000000000000000000000000 ++ 0x3BA3EDFD7A7B12B27AC72C3E67768F617FC81BC3888A51323A9FB8AA4B1E5E4A ++ 0x29AB5F49 ++ 0xFFFF001D ++ 0x1DAC2B7C, 1, 0, 1]
	
	contract.memory[mc-1] = 1
	stop
	
# blockheader should be 80 bytes long
if blockheader.length != 80:
	stop

def getversion(bh):
	return bh[:4]
def getparent(bh):
	return bh[4:4+32]
def getmerkleroot(bh):
	return bh[4+32:4+32+32]
def gettimestamp(bh):
	return bh[4+32+32:4+32+32+4]
def getnbits(bh):
	return bh[4+32+32+4:4+32+32+4+4]
def getnonce(bh):
	return bh[[4+32+32+4+4:80]
def getblockhash(bh):
	return sha256(bh)
def nbitstotarget(nbits):
	return nbits[1:4] * (2 ^ (8*(nbits[0]-3)))
	
blockhash = getblockhash(blockheader)
blockparent = getparent(blockheader)
blockmerkleroot = getmerkleroot(blockheader)
blocktimestamp = gettimestamp(blockheader)
blocknbits = getnbits(blockheader)
metadata = contract.memory[mc]
blockindexcount = metadata[BIC]
topblock = metadata[TB]
topdiff = metadata[TD]

# check we don't have it
# count from top to bottom to make it less expensive to add to top of chain
parentinindex = False
/*i = blockindexcount
while i > 0:
	currdata = contract.memory[mc+i]
	currblock = currdata[0]
	cbhash = getblockhash(currblock)
	if cbhash == blockparent:
		parentinindex = True
		break	# we can break here because a block must have its parent to be added.
		        # this means it will always be after its parent. Since we're searching
				# from most recent first, we would have found our hash had it been there
	if cbhash == blockhash:
		stop
	i -= 1
if parentinindex == False:
	stop*/

parentdata = contract.memory[blockparent]
if parentdata == 0:
	stop # parent not in chain so fail
blockdata = contract.memory[blockhash]
if blockdata != 0:
	stop # block already known about

# check difficulty
target = nbitstotarget(blocknbits)
if blockhash >= target:
	stop
diff = DIFFONETARGET / target

# check checkpoints - maybe
# do this at some point

# add to collection
parentdata = contract.memory[blockparent]
prevdiff = parentdata[CD]
prevheight = parentdata[HGT]
blockindexcount += 1
metadata[BIC] = blockindexcount
contract.memory[mc] = metadata
contract.memory[mc+blockindexcount] = blockhash
newdiff = diff + prevdiff
newheight = prevheight + 1
blockdata = [blockheader, blockindexcount, newheight, newdiff]
contract.memory[blockhash] = blockdata
if newdiff > topdiff:
	# we have a new topblock
	metadata[TB] = blockhash
	metadata[TD] = newdiff
	metadata[TH] = newheight
	contract.memory[mc] = metadata

